name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Run tests
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install pytest pytest-cov; fi
          pip install -e .
      - name: Run tests (unit and fast)
        env:
          QT_QPA_PLATFORM: offscreen
        run: |
          pytest -m "not slow and not integration" --cov=opentiler --cov-report=term-missing

  build-sdist-wheel:
    name: Build sdist/wheel
    needs: tests
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Verify version matches tag
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF##*/}"
          VERSION_FROM_TAG="${TAG#v}"
          echo "Tag: $TAG  Version: $VERSION_FROM_TAG"
          PYVER=$(python - <<'PY'
            import re, sys, pathlib
            sp = pathlib.Path('setup.py').read_text()
            m = re.search(r'version\s*=\s*"([^"]+)"', sp)
            print(m.group(1) if m else 'MISSING')
PY
          )
          echo "setup.py version: $PYVER"
          test "$PYVER" = "$VERSION_FROM_TAG" || { echo "Version mismatch: setup.py=$PYVER tag=$VERSION_FROM_TAG"; exit 1; }
          INITVER=$(python - <<'PY'
            import re, sys, pathlib
            text = pathlib.Path('opentiler/__init__.py').read_text()
            m = re.search(r"__version__\s*=\s*['\"]([^'\"]+)['\"]", text)
            print(m.group(1) if m else 'MISSING')
PY
          )
          echo "__init__ version: $INITVER"
          test "$INITVER" = "$VERSION_FROM_TAG" || { echo "Version mismatch: __init__=$INITVER tag=$VERSION_FROM_TAG"; exit 1; }
      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build distributions
        run: python -m build
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/**

  build-pyinstaller:
    name: PyInstaller ${{ matrix.os }}
    needs: tests
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install -r requirements-optional.txt || true
          pip install pyinstaller
          pip install -e .
      - name: Build binary
        shell: bash
        run: |
          set -euxo pipefail
          APPNAME="OpenTiler"
          # Use onefile build; GUI app by default is console=False for PySide6 when window shown
          pyinstaller --noconfirm --name "$APPNAME" --onefile main.py
          mkdir -p release
          case "${{ runner.os }}" in
            Windows)
              mv "dist/${APPNAME}.exe" "release/${APPNAME}-windows-x86_64.exe"
              ;;
            macOS)
              mv "dist/${APPNAME}" "release/${APPNAME}-macos-x86_64"
              ;;
            Linux)
              mv "dist/${APPNAME}" "release/${APPNAME}-linux-x86_64"
              ;;
          esac
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-${{ runner.os }}
          path: release/**

  create-release:
    name: Create GitHub Release
    needs: [build-sdist-wheel, build-pyinstaller]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/dist/**
            artifacts/pyinstaller-**/**
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
