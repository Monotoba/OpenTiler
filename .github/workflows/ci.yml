name: OpenTiler CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  # Job 1: Code Quality and Testing
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to save CI minutes
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
      continue-on-error: true

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type check with mypy
      run: |
        pip install mypy types-Pillow
        mypy opentiler --ignore-missing-imports
      continue-on-error: true

    - name: Test with pytest (Linux with xvfb)
      if: runner.os == 'Linux'
      run: |
        xvfb-run -a pytest tests/ --cov=opentiler --cov-report=xml --cov-report=term-missing -v

    - name: Test with pytest (Windows/macOS)
      if: runner.os != 'Linux'
      run: |
        pytest tests/ --cov=opentiler --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job 2: Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety

    - name: Check code formatting with Black
      run: black --check --diff .

    - name: Check import sorting with isort
      run: isort --check-only --diff .

    - name: Security check with bandit
      run: bandit -r opentiler/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Check dependencies for security vulnerabilities
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 3: Build Documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme

    - name: Build documentation
      run: |
        # Create basic Sphinx docs if they don't exist
        if [ ! -f "docs/conf.py" ]; then
          mkdir -p docs/_build
          echo "Documentation build skipped - no Sphinx configuration found"
        else
          cd docs && make html
        fi

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  # Job 4: Build Application
  build:
    name: Build Application on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [test, quality]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build with PyInstaller (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        pyinstaller --onefile --windowed --name OpenTiler main.py

    - name: Build with PyInstaller (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --onefile --windowed --name OpenTiler.exe main.py

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: opentiler-${{ runner.os }}
        path: dist/

  # Job 5: Create Release (only on release tags)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, quality, build]
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release archives
      run: |
        # Create archives for each platform
        cd opentiler-Linux && tar -czf ../opentiler-linux.tar.gz * && cd ..
        cd opentiler-Windows && zip -r ../opentiler-windows.zip * && cd ..
        cd opentiler-macOS && tar -czf ../opentiler-macos.tar.gz * && cd ..

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          opentiler-linux.tar.gz
          opentiler-windows.zip
          opentiler-macos.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
