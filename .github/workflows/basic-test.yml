name: Basic Tests

# This workflow runs on every push and pull request
# It's a simpler version that will work immediately
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  basic-test:
    name: Basic Test - Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb

    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Install optional dependencies
      run: |
        pip install -r requirements-optional.txt
      continue-on-error: true

    - name: Test Python imports
      run: |
        python -c "import sys; print('Python version:', sys.version)"
        python -c "import PySide6; print('PySide6 version:', PySide6.__version__)"
        python -c "import PIL; print('Pillow version:', PIL.__version__)"
        python -c "import fitz; print('PyMuPDF imported successfully')"

    - name: Test OpenTiler imports
      run: |
        python -c "import opentiler; print('✅ OpenTiler package imports successfully')"

    - name: Run basic tests
      if: runner.os == 'Linux'
      run: |
        xvfb-run -a python -m pytest tests/ -v --tb=short
      continue-on-error: true

    - name: Run basic tests (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m pytest tests/ -v --tb=short
      continue-on-error: true

    - name: Check code syntax
      run: |
        python -m py_compile main.py
        python -c "import ast; ast.parse(open('main.py').read()); print('✅ main.py syntax OK')"

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black

    - name: Check with flake8
      run: |
        # Check for syntax errors and undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Check for other issues (warnings only)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting
      run: |
        black --check --diff . || echo "⚠️ Code formatting issues found (run 'black .' to fix)"
